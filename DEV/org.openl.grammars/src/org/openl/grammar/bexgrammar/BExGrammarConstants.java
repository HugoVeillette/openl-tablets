/* Generated By:JavaCC: Do not edit this line. BExGrammarConstants.java */
package org.openl.grammar.bexgrammar;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BExGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int _WHITESPACE = 6;
  /** RegularExpression Id. */
  int DOT_OPERATOR = 7;
  /** RegularExpression Id. */
  int BREAK = 8;
  /** RegularExpression Id. */
  int CASE = 9;
  /** RegularExpression Id. */
  int CATCH = 10;
  /** RegularExpression Id. */
  int CONST = 11;
  /** RegularExpression Id. */
  int CONTINUE = 12;
  /** RegularExpression Id. */
  int _DEFAULT = 13;
  /** RegularExpression Id. */
  int DO = 14;
  /** RegularExpression Id. */
  int ELSE = 15;
  /** RegularExpression Id. */
  int FALSE = 16;
  /** RegularExpression Id. */
  int FINALLY = 17;
  /** RegularExpression Id. */
  int FOR = 18;
  /** RegularExpression Id. */
  int GOTO = 19;
  /** RegularExpression Id. */
  int IF = 20;
  /** RegularExpression Id. */
  int INSTANCEOF = 21;
  /** RegularExpression Id. */
  int NEW = 22;
  /** RegularExpression Id. */
  int NULL = 23;
  /** RegularExpression Id. */
  int RETURN = 24;
  /** RegularExpression Id. */
  int SUPER = 25;
  /** RegularExpression Id. */
  int THROW = 26;
  /** RegularExpression Id. */
  int THROWS = 27;
  /** RegularExpression Id. */
  int TRUE = 28;
  /** RegularExpression Id. */
  int TRY = 29;
  /** RegularExpression Id. */
  int VOID = 30;
  /** RegularExpression Id. */
  int WHILE = 31;
  /** RegularExpression Id. */
  int OF_THE = 32;
  /** RegularExpression Id. */
  int LPAREN = 33;
  /** RegularExpression Id. */
  int RPAREN = 34;
  /** RegularExpression Id. */
  int LBRACE = 35;
  /** RegularExpression Id. */
  int RBRACE = 36;
  /** RegularExpression Id. */
  int LBRACKET = 37;
  /** RegularExpression Id. */
  int RBRACKET = 38;
  /** RegularExpression Id. */
  int SEMICOLON = 39;
  /** RegularExpression Id. */
  int COMMA = 40;
  /** RegularExpression Id. */
  int DDOT = 41;
  /** RegularExpression Id. */
  int TDOT = 42;
  /** RegularExpression Id. */
  int TDOT_UNICODE = 43;
  /** RegularExpression Id. */
  int WHERE = 44;
  /** RegularExpression Id. */
  int EQ = 45;
  /** RegularExpression Id. */
  int EQUALS_TO = 46;
  /** RegularExpression Id. */
  int IS_SAME_AS = 47;
  /** RegularExpression Id. */
  int IS_THE_SAME_AS = 48;
  /** RegularExpression Id. */
  int ASSIGN = 49;
  /** RegularExpression Id. */
  int GT = 50;
  /** RegularExpression Id. */
  int STRICT_GT = 51;
  /** RegularExpression Id. */
  int LT = 52;
  /** RegularExpression Id. */
  int STRICT_LT = 53;
  /** RegularExpression Id. */
  int NOT = 54;
  /** RegularExpression Id. */
  int HOOK = 55;
  /** RegularExpression Id. */
  int COLON = 56;
  /** RegularExpression Id. */
  int STRICT_EQ = 57;
  /** RegularExpression Id. */
  int LE = 58;
  /** RegularExpression Id. */
  int STRICT_LE = 59;
  /** RegularExpression Id. */
  int GE = 60;
  /** RegularExpression Id. */
  int STRICT_GE = 61;
  /** RegularExpression Id. */
  int NE = 62;
  /** RegularExpression Id. */
  int NE_ALT = 63;
  /** RegularExpression Id. */
  int STRICT_NE = 64;
  /** RegularExpression Id. */
  int BOOL_OR = 65;
  /** RegularExpression Id. */
  int BOOL_AND = 66;
  /** RegularExpression Id. */
  int INCR = 67;
  /** RegularExpression Id. */
  int DECR = 68;
  /** RegularExpression Id. */
  int PLUS = 69;
  /** RegularExpression Id. */
  int MINUS = 70;
  /** RegularExpression Id. */
  int STAR = 71;
  /** RegularExpression Id. */
  int SLASH = 72;
  /** RegularExpression Id. */
  int REM = 73;
  /** RegularExpression Id. */
  int PLUSASSIGN = 74;
  /** RegularExpression Id. */
  int MINUSASSIGN = 75;
  /** RegularExpression Id. */
  int STARASSIGN = 76;
  /** RegularExpression Id. */
  int SLASHASSIGN = 77;
  /** RegularExpression Id. */
  int ANDASSIGN = 78;
  /** RegularExpression Id. */
  int ORASSIGN = 79;
  /** RegularExpression Id. */
  int XORASSIGN = 80;
  /** RegularExpression Id. */
  int REMASSIGN = 81;
  /** RegularExpression Id. */
  int EXP = 82;
  /** RegularExpression Id. */
  int IMPL = 83;
  /** RegularExpression Id. */
  int STRING_LE = 84;
  /** RegularExpression Id. */
  int STRING_LT = 85;
  /** RegularExpression Id. */
  int STRING_GE = 86;
  /** RegularExpression Id. */
  int STRING_GT = 87;
  /** RegularExpression Id. */
  int STRING_EQ = 88;
  /** RegularExpression Id. */
  int STRING_NE = 89;
  /** RegularExpression Id. */
  int STRING_NE_ALT = 90;
  /** RegularExpression Id. */
  int DOES_NOT_EQUAL_TO = 91;
  /** RegularExpression Id. */
  int IS_DIFFERENT_FROM = 92;
  /** RegularExpression Id. */
  int IS_LESS_THAN = 93;
  /** RegularExpression Id. */
  int IS_MORE_THAN = 94;
  /** RegularExpression Id. */
  int IS_LESS_OR_EQUAL = 95;
  /** RegularExpression Id. */
  int IS_NO_MORE_THAN = 96;
  /** RegularExpression Id. */
  int IS_IN = 97;
  /** RegularExpression Id. */
  int IS_MORE_OR_EQUAL = 98;
  /** RegularExpression Id. */
  int IS_NO_LESS_THAN = 99;
  /** RegularExpression Id. */
  int SELECT_ALL_HAVING = 100;
  /** RegularExpression Id. */
  int SELECT_ALL_WHERE = 101;
  /** RegularExpression Id. */
  int SELECT_FIRST_HAVING = 102;
  /** RegularExpression Id. */
  int SELECT_FIRST_WHERE = 103;
  /** RegularExpression Id. */
  int ORDER_BY = 104;
  /** RegularExpression Id. */
  int ORDER_INCREASING_BY = 105;
  /** RegularExpression Id. */
  int ORDER_DECREASING_BY = 106;
  /** RegularExpression Id. */
  int SPLIT_BY = 107;
  /** RegularExpression Id. */
  int TRANSFORM_TO = 108;
  /** RegularExpression Id. */
  int TRANSFORM_UNIQUE_TO = 109;
  /** RegularExpression Id. */
  int LESS_THAN = 110;
  /** RegularExpression Id. */
  int MORE_THAN = 111;
  /** RegularExpression Id. */
  int OR_LESS = 112;
  /** RegularExpression Id. */
  int AND_MORE = 113;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 114;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 115;
  /** RegularExpression Id. */
  int HEX_LITERAL = 116;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 117;
  /** RegularExpression Id. */
  int FP_LITERAL1 = 118;
  /** RegularExpression Id. */
  int FP_LITERAL2 = 119;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 120;
  /** RegularExpression Id. */
  int BUSINESS_INTEGER_LITERAL = 121;
  /** RegularExpression Id. */
  int DATE_FORMAT_LITERAL_4_2_2 = 122;
  /** RegularExpression Id. */
  int TIME_FORMAT_LITERAL = 123;
  /** RegularExpression Id. */
  int PERCENT_LITERAL = 124;
  /** RegularExpression Id. */
  int EXPONENT = 125;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 126;
  /** RegularExpression Id. */
  int STRING_LITERAL = 127;
  /** RegularExpression Id. */
  int IDENTIFIER = 128;
  /** RegularExpression Id. */
  int LETTER = 129;
  /** RegularExpression Id. */
  int DIGIT = 130;
  /** RegularExpression Id. */
  int RANGE_VARIABLE = 131;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 134;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 135;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 136;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int REF_IDENTIFIER = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\f\"",
    "<_WHITESPACE>",
    "\".\"",
    "\"break\"",
    "\"case\"",
    "\"catch\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"else\"",
    "\"false\"",
    "\"finally\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"instanceof\"",
    "\"new\"",
    "\"null\"",
    "\"return\"",
    "\"super\"",
    "\"throw\"",
    "\"throws\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"while\"",
    "<OF_THE>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\"..\"",
    "\"...\"",
    "\"\\u2026\"",
    "\"where\"",
    "<EQ>",
    "<EQUALS_TO>",
    "<IS_SAME_AS>",
    "<IS_THE_SAME_AS>",
    "\"=\"",
    "\">\"",
    "\">==\"",
    "\"<\"",
    "\"<==\"",
    "<NOT>",
    "\"?\"",
    "\":\"",
    "\"====\"",
    "\"<=\"",
    "\"<===\"",
    "\">=\"",
    "\">===\"",
    "\"!=\"",
    "\"<>\"",
    "\"!===\"",
    "<BOOL_OR>",
    "<BOOL_AND>",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"**\"",
    "\"->\"",
    "\"string<=\"",
    "\"string<\"",
    "\"string>=\"",
    "\"string>\"",
    "\"string==\"",
    "\"string!=\"",
    "\"string<>\"",
    "<DOES_NOT_EQUAL_TO>",
    "<IS_DIFFERENT_FROM>",
    "<IS_LESS_THAN>",
    "<IS_MORE_THAN>",
    "<IS_LESS_OR_EQUAL>",
    "<IS_NO_MORE_THAN>",
    "<IS_IN>",
    "<IS_MORE_OR_EQUAL>",
    "<IS_NO_LESS_THAN>",
    "<SELECT_ALL_HAVING>",
    "<SELECT_ALL_WHERE>",
    "<SELECT_FIRST_HAVING>",
    "<SELECT_FIRST_WHERE>",
    "<ORDER_BY>",
    "<ORDER_INCREASING_BY>",
    "<ORDER_DECREASING_BY>",
    "<SPLIT_BY>",
    "<TRANSFORM_TO>",
    "<TRANSFORM_UNIQUE_TO>",
    "<LESS_THAN>",
    "<MORE_THAN>",
    "<OR_LESS>",
    "<AND_MORE>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FP_LITERAL1>",
    "<FP_LITERAL2>",
    "<FLOATING_POINT_LITERAL>",
    "<BUSINESS_INTEGER_LITERAL>",
    "<DATE_FORMAT_LITERAL_4_2_2>",
    "<TIME_FORMAT_LITERAL>",
    "<PERCENT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<RANGE_VARIABLE>",
    "<token of kind 132>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 137>",
    "\"@\"",
    "\"!@\"",
    "\"^@\"",
    "\"v@\"",
    "\"~@\"",
    "\"s@\"",
    "\"*@\"",
    "\"*!@\"",
    "\"|\"",
  };

}
