/* Generated By:JavaCC: Do not edit this line. BExGrammarConstants.java */
package org.openl.grammar.bexgrammar;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface BExGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int OR = 6;
  /** RegularExpression Id. */
  int AND = 7;
  /** RegularExpression Id. */
  int NOT = 8;
  /** RegularExpression Id. */
  int BREAK = 9;
  /** RegularExpression Id. */
  int CALCULATE = 10;
  /** RegularExpression Id. */
  int CASE = 11;
  /** RegularExpression Id. */
  int CATCH = 12;
  /** RegularExpression Id. */
  int CONST = 13;
  /** RegularExpression Id. */
  int CONTINUE = 14;
  /** RegularExpression Id. */
  int _DEFAULT = 15;
  /** RegularExpression Id. */
  int DO = 16;
  /** RegularExpression Id. */
  int ELSE = 17;
  /** RegularExpression Id. */
  int FALSE = 18;
  /** RegularExpression Id. */
  int FINALLY = 19;
  /** RegularExpression Id. */
  int FOR = 20;
  /** RegularExpression Id. */
  int GOTO = 21;
  /** RegularExpression Id. */
  int IF = 22;
  /** RegularExpression Id. */
  int PLUSSTR = 23;
  /** RegularExpression Id. */
  int INSTANCEOF = 24;
  /** RegularExpression Id. */
  int NEW = 25;
  /** RegularExpression Id. */
  int NULL = 26;
  /** RegularExpression Id. */
  int RETURN = 27;
  /** RegularExpression Id. */
  int SUPER = 28;
  /** RegularExpression Id. */
  int SWITCH = 29;
  /** RegularExpression Id. */
  int THROW = 30;
  /** RegularExpression Id. */
  int THROWS = 31;
  /** RegularExpression Id. */
  int TRUE = 32;
  /** RegularExpression Id. */
  int TRY = 33;
  /** RegularExpression Id. */
  int VOID = 34;
  /** RegularExpression Id. */
  int WHILE = 35;
  /** RegularExpression Id. */
  int OF = 36;
  /** RegularExpression Id. */
  int THE = 37;
  /** RegularExpression Id. */
  int WHERE = 38;
  /** RegularExpression Id. */
  int IS = 39;
  /** RegularExpression Id. */
  int LESS = 40;
  /** RegularExpression Id. */
  int THAN = 41;
  /** RegularExpression Id. */
  int LPAREN = 42;
  /** RegularExpression Id. */
  int RPAREN = 43;
  /** RegularExpression Id. */
  int LBRACE = 44;
  /** RegularExpression Id. */
  int RBRACE = 45;
  /** RegularExpression Id. */
  int LBRACKET = 46;
  /** RegularExpression Id. */
  int RBRACKET = 47;
  /** RegularExpression Id. */
  int SEMICOLON = 48;
  /** RegularExpression Id. */
  int COMMA = 49;
  /** RegularExpression Id. */
  int DOT = 50;
  /** RegularExpression Id. */
  int DDOT = 51;
  /** RegularExpression Id. */
  int TDOT = 52;
  /** RegularExpression Id. */
  int TDOT_UNICODE = 53;
  /** RegularExpression Id. */
  int ASSIGN = 54;
  /** RegularExpression Id. */
  int GT = 55;
  /** RegularExpression Id. */
  int STRICT_GT = 56;
  /** RegularExpression Id. */
  int LT = 57;
  /** RegularExpression Id. */
  int STRICT_LT = 58;
  /** RegularExpression Id. */
  int BANG = 59;
  /** RegularExpression Id. */
  int TILDE = 60;
  /** RegularExpression Id. */
  int HOOK = 61;
  /** RegularExpression Id. */
  int COLON = 62;
  /** RegularExpression Id. */
  int EQ = 63;
  /** RegularExpression Id. */
  int STRICT_EQ = 64;
  /** RegularExpression Id. */
  int LE = 65;
  /** RegularExpression Id. */
  int STRICT_LE = 66;
  /** RegularExpression Id. */
  int GE = 67;
  /** RegularExpression Id. */
  int STRICT_GE = 68;
  /** RegularExpression Id. */
  int NE = 69;
  /** RegularExpression Id. */
  int NE_ALT = 70;
  /** RegularExpression Id. */
  int STRICT_NE = 71;
  /** RegularExpression Id. */
  int BOOL_OR = 72;
  /** RegularExpression Id. */
  int BOOL_AND = 73;
  /** RegularExpression Id. */
  int INCR = 74;
  /** RegularExpression Id. */
  int DECR = 75;
  /** RegularExpression Id. */
  int PLUS = 76;
  /** RegularExpression Id. */
  int MINUS = 77;
  /** RegularExpression Id. */
  int STAR = 78;
  /** RegularExpression Id. */
  int SLASH = 79;
  /** RegularExpression Id. */
  int BIT_AND = 80;
  /** RegularExpression Id. */
  int BIT_OR = 81;
  /** RegularExpression Id. */
  int BIT_XOR = 82;
  /** RegularExpression Id. */
  int REM = 83;
  /** RegularExpression Id. */
  int LSHIFT = 84;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 85;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 86;
  /** RegularExpression Id. */
  int PLUSASSIGN = 87;
  /** RegularExpression Id. */
  int MINUSASSIGN = 88;
  /** RegularExpression Id. */
  int STARASSIGN = 89;
  /** RegularExpression Id. */
  int SLASHASSIGN = 90;
  /** RegularExpression Id. */
  int ANDASSIGN = 91;
  /** RegularExpression Id. */
  int ORASSIGN = 92;
  /** RegularExpression Id. */
  int XORASSIGN = 93;
  /** RegularExpression Id. */
  int REMASSIGN = 94;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 95;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 96;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 97;
  /** RegularExpression Id. */
  int EXP = 98;
  /** RegularExpression Id. */
  int IMPL = 99;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 100;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 101;
  /** RegularExpression Id. */
  int HEX_LITERAL = 102;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 103;
  /** RegularExpression Id. */
  int FP_LITERAL1 = 104;
  /** RegularExpression Id. */
  int FP_LITERAL2 = 105;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 106;
  /** RegularExpression Id. */
  int BUSINESS_INTEGER_LITERAL = 107;
  /** RegularExpression Id. */
  int DATE_FORMAT_LITERAL_4_2_2 = 108;
  /** RegularExpression Id. */
  int TIME_FORMAT_LITERAL = 109;
  /** RegularExpression Id. */
  int PERCENT_LITERAL = 110;
  /** RegularExpression Id. */
  int EXPONENT = 111;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 112;
  /** RegularExpression Id. */
  int STRING_LITERAL = 113;
  /** RegularExpression Id. */
  int IDENTIFIER = 114;
  /** RegularExpression Id. */
  int LETTER = 115;
  /** RegularExpression Id. */
  int DIGIT = 116;
  /** RegularExpression Id. */
  int RANGE_VARIABLE = 117;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 120;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 121;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 122;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\f\"",
    "\"or\"",
    "\"and\"",
    "\"not\"",
    "\"break\"",
    "\"Calculate\"",
    "\"case\"",
    "\"catch\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"else\"",
    "\"false\"",
    "\"finally\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"plus\"",
    "\"instanceof\"",
    "\"new\"",
    "\"null\"",
    "\"return\"",
    "\"super\"",
    "\"switch\"",
    "\"throw\"",
    "\"throws\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"while\"",
    "\"of\"",
    "\"the\"",
    "\"where\"",
    "\"is\"",
    "\"less\"",
    "\"than\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"..\"",
    "\"...\"",
    "\"\\u2026\"",
    "\"=\"",
    "\">\"",
    "\">==\"",
    "\"<\"",
    "\"<==\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"====\"",
    "\"<=\"",
    "\"<===\"",
    "\">=\"",
    "\">===\"",
    "\"!=\"",
    "\"<>\"",
    "\"!===\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"**\"",
    "\"->\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FP_LITERAL1>",
    "<FP_LITERAL2>",
    "<FLOATING_POINT_LITERAL>",
    "<BUSINESS_INTEGER_LITERAL>",
    "<DATE_FORMAT_LITERAL_4_2_2>",
    "<TIME_FORMAT_LITERAL>",
    "<PERCENT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<RANGE_VARIABLE>",
    "<token of kind 118>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 123>",
    "\"equals to\"",
    "\"is same as\"",
    "\"does not equal to\"",
    "\"is different from\"",
    "\"is less than\"",
    "\"is more than\"",
    "\"is less or equal\"",
    "\"is no more than\"",
    "\"is in\"",
    "\"is more or equal\"",
    "\"is no less than\"",
    "\"@\"",
    "\"select all having\"",
    "\"select all where\"",
    "\"!@\"",
    "\"select first having\"",
    "\"select first where\"",
    "\"^@\"",
    "\"order by\"",
    "\"order increasing by\"",
    "\"v@\"",
    "\"order decreasing by\"",
    "\"~@\"",
    "\"s@\"",
    "\"split by\"",
    "\"*@\"",
    "\"transform to\"",
    "\"*!@\"",
    "\"transform unique to\"",
    "\"less than\"",
    "\"more than\"",
    "\"or less\"",
    "\"and more\"",
  };

}
