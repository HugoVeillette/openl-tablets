/* Generated By:JavaCC: Do not edit this line. JGrammarConstants.java */
package org.openl.grammar.jgrammar;

/**
 * Token literal values and constants. Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JGrammarConstants {

    /** End of File. */
    int EOF = 0;
    /** RegularExpression Id. */
    int ABSTRACT = 6;
    /** RegularExpression Id. */
    int BREAK = 7;
    /** RegularExpression Id. */
    int CASE = 8;
    /** RegularExpression Id. */
    int CATCH = 9;
    /** RegularExpression Id. */
    int CONST = 10;
    /** RegularExpression Id. */
    int CONTINUE = 11;
    /** RegularExpression Id. */
    int _DEFAULT = 12;
    /** RegularExpression Id. */
    int DO = 13;
    /** RegularExpression Id. */
    int ELSE = 14;
    /** RegularExpression Id. */
    int EXTENDS = 15;
    /** RegularExpression Id. */
    int FALSE = 16;
    /** RegularExpression Id. */
    int FINAL = 17;
    /** RegularExpression Id. */
    int FINALLY = 18;
    /** RegularExpression Id. */
    int FOR = 19;
    /** RegularExpression Id. */
    int GOTO = 20;
    /** RegularExpression Id. */
    int IF = 21;
    /** RegularExpression Id. */
    int IMPLEMENTS = 22;
    /** RegularExpression Id. */
    int IMPORT = 23;
    /** RegularExpression Id. */
    int INSTANCEOF = 24;
    /** RegularExpression Id. */
    int INTERFACE = 25;
    /** RegularExpression Id. */
    int NATIVE = 26;
    /** RegularExpression Id. */
    int NEW = 27;
    /** RegularExpression Id. */
    int NULL = 28;
    /** RegularExpression Id. */
    int PACKAGE = 29;
    /** RegularExpression Id. */
    int PRIVATE = 30;
    /** RegularExpression Id. */
    int PROTECTED = 31;
    /** RegularExpression Id. */
    int PUBLIC = 32;
    /** RegularExpression Id. */
    int RETURN = 33;
    /** RegularExpression Id. */
    int STATIC = 34;
    /** RegularExpression Id. */
    int SUPER = 35;
    /** RegularExpression Id. */
    int SWITCH = 36;
    /** RegularExpression Id. */
    int SYNCHRONIZED = 37;
    /** RegularExpression Id. */
    int THROW = 38;
    /** RegularExpression Id. */
    int THROWS = 39;
    /** RegularExpression Id. */
    int TRANSIENT = 40;
    /** RegularExpression Id. */
    int TRUE = 41;
    /** RegularExpression Id. */
    int TRY = 42;
    /** RegularExpression Id. */
    int VOID = 43;
    /** RegularExpression Id. */
    int VOLATILE = 44;
    /** RegularExpression Id. */
    int WHILE = 45;
    /** RegularExpression Id. */
    int LPAREN = 46;
    /** RegularExpression Id. */
    int RPAREN = 47;
    /** RegularExpression Id. */
    int LBRACE = 48;
    /** RegularExpression Id. */
    int RBRACE = 49;
    /** RegularExpression Id. */
    int LBRACKET = 50;
    /** RegularExpression Id. */
    int RBRACKET = 51;
    /** RegularExpression Id. */
    int SEMICOLON = 52;
    /** RegularExpression Id. */
    int COMMA = 53;
    /** RegularExpression Id. */
    int DOT = 54;
    /** RegularExpression Id. */
    int ASSIGN = 55;
    /** RegularExpression Id. */
    int GT = 56;
    /** RegularExpression Id. */
    int LT = 57;
    /** RegularExpression Id. */
    int BANG = 58;
    /** RegularExpression Id. */
    int TILDE = 59;
    /** RegularExpression Id. */
    int HOOK = 60;
    /** RegularExpression Id. */
    int COLON = 61;
    /** RegularExpression Id. */
    int EQ = 62;
    /** RegularExpression Id. */
    int LE = 63;
    /** RegularExpression Id. */
    int GE = 64;
    /** RegularExpression Id. */
    int NE = 65;
    /** RegularExpression Id. */
    int SC_OR = 66;
    /** RegularExpression Id. */
    int SC_AND = 67;
    /** RegularExpression Id. */
    int INCR = 68;
    /** RegularExpression Id. */
    int DECR = 69;
    /** RegularExpression Id. */
    int PLUS = 70;
    /** RegularExpression Id. */
    int MINUS = 71;
    /** RegularExpression Id. */
    int STAR = 72;
    /** RegularExpression Id. */
    int SLASH = 73;
    /** RegularExpression Id. */
    int BIT_AND = 74;
    /** RegularExpression Id. */
    int BIT_OR = 75;
    /** RegularExpression Id. */
    int XOR = 76;
    /** RegularExpression Id. */
    int REM = 77;
    /** RegularExpression Id. */
    int LSHIFT = 78;
    /** RegularExpression Id. */
    int RSIGNEDSHIFT = 79;
    /** RegularExpression Id. */
    int RUNSIGNEDSHIFT = 80;
    /** RegularExpression Id. */
    int PLUSASSIGN = 81;
    /** RegularExpression Id. */
    int MINUSASSIGN = 82;
    /** RegularExpression Id. */
    int STARASSIGN = 83;
    /** RegularExpression Id. */
    int SLASHASSIGN = 84;
    /** RegularExpression Id. */
    int ANDASSIGN = 85;
    /** RegularExpression Id. */
    int ORASSIGN = 86;
    /** RegularExpression Id. */
    int XORASSIGN = 87;
    /** RegularExpression Id. */
    int REMASSIGN = 88;
    /** RegularExpression Id. */
    int LSHIFTASSIGN = 89;
    /** RegularExpression Id. */
    int RSIGNEDSHIFTASSIGN = 90;
    /** RegularExpression Id. */
    int RUNSIGNEDSHIFTASSIGN = 91;
    /** RegularExpression Id. */
    int EXP = 92;
    /** RegularExpression Id. */
    int IMPL = 93;
    /** RegularExpression Id. */
    int INTEGER_LITERAL = 94;
    /** RegularExpression Id. */
    int DECIMAL_LITERAL = 95;
    /** RegularExpression Id. */
    int HEX_LITERAL = 96;
    /** RegularExpression Id. */
    int OCTAL_LITERAL = 97;
    /** RegularExpression Id. */
    int FLOATING_POINT_LITERAL = 98;
    /** RegularExpression Id. */
    int EXPONENT = 99;
    /** RegularExpression Id. */
    int CHARACTER_LITERAL = 100;
    /** RegularExpression Id. */
    int STRING_LITERAL = 101;
    /** RegularExpression Id. */
    int IDENTIFIER = 102;
    /** RegularExpression Id. */
    int LETTER = 103;
    /** RegularExpression Id. */
    int DIGIT = 104;
    /** RegularExpression Id. */
    int SINGLE_LINE_COMMENT = 107;
    /** RegularExpression Id. */
    int FORMAL_COMMENT = 108;
    /** RegularExpression Id. */
    int MULTI_LINE_COMMENT = 109;

    /** Lexical state. */
    int DEFAULT = 0;
    /** Lexical state. */
    int IN_FORMAL_COMMENT = 1;
    /** Lexical state. */
    int IN_MULTI_LINE_COMMENT = 2;

    /** Literal token values. */
    String[] tokenImage = { "<EOF>",
            "\" \"",
            "\"\\r\"",
            "\"\\t\"",
            "\"\\n\"",
            "\"\\f\"",
            "\"abstract\"",
            "\"break\"",
            "\"case\"",
            "\"catch\"",
            "\"const\"",
            "\"continue\"",
            "\"default\"",
            "\"do\"",
            "\"else\"",
            "\"extends\"",
            "\"false\"",
            "\"final\"",
            "\"finally\"",
            "\"for\"",
            "\"goto\"",
            "\"if\"",
            "\"implements\"",
            "\"import\"",
            "\"instanceof\"",
            "\"interface\"",
            "\"native\"",
            "\"new\"",
            "\"null\"",
            "\"package\"",
            "\"private\"",
            "\"protected\"",
            "\"public\"",
            "\"return\"",
            "\"static\"",
            "\"super\"",
            "\"switch\"",
            "\"synchronized\"",
            "\"throw\"",
            "\"throws\"",
            "\"transient\"",
            "\"true\"",
            "\"try\"",
            "\"void\"",
            "\"volatile\"",
            "\"while\"",
            "\"(\"",
            "\")\"",
            "\"{\"",
            "\"}\"",
            "\"[\"",
            "\"]\"",
            "\";\"",
            "\",\"",
            "\".\"",
            "\"=\"",
            "\">\"",
            "\"<\"",
            "\"!\"",
            "\"~\"",
            "\"?\"",
            "\":\"",
            "\"==\"",
            "\"<=\"",
            "\">=\"",
            "\"!=\"",
            "\"||\"",
            "\"&&\"",
            "\"++\"",
            "\"--\"",
            "\"+\"",
            "\"-\"",
            "\"*\"",
            "\"/\"",
            "\"&\"",
            "\"|\"",
            "\"^\"",
            "\"%\"",
            "\"<<\"",
            "\">>\"",
            "\">>>\"",
            "\"+=\"",
            "\"-=\"",
            "\"*=\"",
            "\"/=\"",
            "\"&=\"",
            "\"|=\"",
            "\"^=\"",
            "\"%=\"",
            "\"<<=\"",
            "\">>=\"",
            "\">>>=\"",
            "\"**\"",
            "\"->\"",
            "<INTEGER_LITERAL>",
            "<DECIMAL_LITERAL>",
            "<HEX_LITERAL>",
            "<OCTAL_LITERAL>",
            "<FLOATING_POINT_LITERAL>",
            "<EXPONENT>",
            "<CHARACTER_LITERAL>",
            "<STRING_LITERAL>",
            "<IDENTIFIER>",
            "<LETTER>",
            "<DIGIT>",
            "<token of kind 105>",
            "\"/*\"",
            "<SINGLE_LINE_COMMENT>",
            "\"*/\"",
            "\"*/\"",
            "<token of kind 110>", };

}
