<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <import resource="common-authentication.xml"/>
    <import resource="authorization.xml"/>
    <import resource="db-services.xml" />

    <bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
        <security:filter-chain-map request-matcher="ant">
            <security:filter-chain pattern="/css/**" filters="none" />
            <security:filter-chain pattern="/images/**" filters="none" />
            <security:filter-chain pattern="/javascript/**" filters="none" />
            <security:filter-chain pattern="/faces/javax.faces.resource/**" filters="none" />
            <security:filter-chain pattern="/faces/rfRes/**" filters="none" />
<!--
            <security:filter-chain pattern="/rest/**" filters="basicAuthenticationFilter,restExceptionTranslationFilter,filterSecurityInterceptor" />
-->
            <security:filter-chain pattern="/**" filters="securityContextPersistenceFilter,logoutFilter,singleLogoutFilter,casFilter,exceptionTranslationFilter,filterSecurityInterceptor" />
        </security:filter-chain-map>
    </bean>

    <!-- ================================= Define properties ======================================= -->
    <bean id="casConfigManagerFactory" class="org.openl.config.ConfigurationManagerFactory">
        <constructor-arg name="useSystemProperties" value="true"/>
        <constructor-arg name="defaultPropertiesLocation"
                         value="#{systemProperties['webapp.root']}/WEB-INF/conf/security-cas.properties"/>
        <constructor-arg name="propertiesFolder" value="#{systemProperties['webstudio.home']}/system-settings/"/>
    </bean>
    <bean id="casConfigManager" factory-bean="casConfigManagerFactory" factory-method="getConfigurationManager"
          autowire-candidate="false">
        <constructor-arg name="propertiesName" value="security-cas.properties"/>
    </bean>
    <bean id="casConfig" class="java.util.HashMap">
        <constructor-arg value="#{casConfigManager.properties}" />
    </bean>

    <!-- ============================ Define needed beans for dependencies ====================================== -->
    <bean id="rememberMeServices" class="org.springframework.security.web.authentication.NullRememberMeServices"/>

    <util:list id="authenticationProviders">
        <ref bean="authenticationProviderWrapper" />
    </util:list>

    <alias name="groupsAreManagedInStudio" alias="canCreateExternalUsers"/>

    <!-- ======================== Logout ========================== -->

    <bean id="logoutUrl" class="java.lang.String">
        <constructor-arg value="/security_logout" />
    </bean>
    <!-- Redirect to the CAS Server to signal Single Logout should be performed -->
    <bean id="logoutSuccessUrl" class="java.lang.String">
        <constructor-arg value="#{casConfig['security.cas.cas-server-url-prefix']}/logout" />
    </bean>

    <util:list id="logoutHandlers">
        <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
    </util:list>

    <!-- This filter handles a Single Logout Request from the CAS Server -->
    <bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter"/>

    <!-- ========================= CAS ============================= -->
    <bean id="casServiceUrl" class="java.lang.String">
        <constructor-arg value="/login/cas" />
    </bean>

    <bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
        <property name="service" value="#{casConfig['security.cas.app-url']}#{casServiceUrl}"/>
        <property name="authenticateAllArtifacts" value="true"/>
    </bean>

    <bean id="casFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="filterProcessesUrl" value="#{casServiceUrl}"/>
    </bean>

    <bean id="authenticationEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
        <property name="loginUrl" value="#{casConfig['security.cas.cas-server-url-prefix']}/login"/>
        <property name="serviceProperties" ref="serviceProperties"/>
    </bean>

    <bean id="casAuthenticationProvider" class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
        <property name="serviceProperties" ref="serviceProperties" />
        <property name="ticketValidator">
            <bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
                <constructor-arg name="casServerUrlPrefix" value="#{casConfig['security.cas.cas-server-url-prefix']}" />
                <property name="encoding" value="UTF-8"/>
            </bean>
        </property>
        <property name="authenticationUserDetailsService">
            <bean class="org.openl.rules.webstudio.security.CASAttributesToOpenLUserDetailsService">
                <constructor-arg name="firstNameAttribute" value="#{casConfig['security.cas.attribute.first-name']}"/>
                <constructor-arg name="lastNameAttribute" value="#{casConfig['security.cas.attribute.last-name']}"/>
                <constructor-arg name="groupsAttribute" value="#{casConfig['security.cas.attribute.groups-attribute']}"/>
            </bean>
        </property>
        <property name="authoritiesMapper" ref="authoritiesMapper"/>
        <property name="key" value="OpenLCasAuthenticationProviderKey"/>
    </bean>

    <bean id="groupsAreManagedInStudio" class="java.lang.Boolean">
        <constructor-arg type="boolean" value="#{casConfig['security.cas.attribute.groups-attribute'].isEmpty()}"/>
    </bean>

    <bean id="authenticationProviderWrapper" class="org.openl.rules.webstudio.security.OpenLAuthenticationProviderWrapper">
        <constructor-arg name="delegate" ref="casAuthenticationProvider"/>
        <constructor-arg name="authenticationUserDetailsService">
            <bean class="org.openl.rules.webstudio.security.CreateIfNotExistAuthenticationUserDetailsService">
                <constructor-arg name="userManagementService" ref="userManagementService"/>
                <constructor-arg name="groupManagementService" ref="groupManagementService"/>
                <property name="defaultGroup" value="#{casConfig['security.cas.default-group']}"/>
            </bean>
        </constructor-arg>
        <property name="groupsAreManagedInStudio" ref="groupsAreManagedInStudio"/>
    </bean>

</beans>
