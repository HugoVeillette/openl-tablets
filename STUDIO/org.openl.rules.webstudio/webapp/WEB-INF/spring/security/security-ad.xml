<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
          http://www.springframework.org/schema/util
          http://www.springframework.org/schema/util/spring-util.xsd">

    <import resource="common-authentication.xml"/>
    <import resource="form-based-authentication.xml"/>
    <import resource="authorization.xml"/>
    <import resource="db-services.xml" />

    <!-- ============================ Define needed beans for dependencies ====================================== -->
    <bean id="rememberMeServices" class="org.springframework.security.web.authentication.NullRememberMeServices"/>

    <util:list id="authenticationProviders">
        <!-- First try to authenticate using internal users DB, then using AD-->
        <ref bean="daoAuthenticationProvider" />
        <ref bean="authenticationProviderWrapper" />
    </util:list>

    <util:list id="logoutHandlers">
        <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
    </util:list>

    <alias name="groupsAreManagedInStudio" alias="canCreateExternalUsers"/>

    <bean id="canCreateInternalUsers" class="java.lang.Boolean">
        <constructor-arg type="boolean" value="true"/>
    </bean>

    <!-- ================================= Authentication ======================================= -->
    <bean id="adAuthenticationProvider" class="org.springframework.security.ldap.authentication.ad.ActiveDirectoryLdapAuthenticationProvider">
        <constructor-arg name="domain" value="#{systemConfig['security.ad.domain']}"/>
        <constructor-arg name="url" value="#{systemConfig['security.ad.server-url']}"/>
        <property name="searchFilter" value="#{systemConfig['security.ad.search-filter']}"/>
        <property name="authoritiesMapper" ref="authoritiesMapper"/>
        <property name="userDetailsContextMapper" ref="userDetailsContextMapper"/>
    </bean>

    <bean id="userDetailsContextMapper" class="org.openl.rules.webstudio.security.LdapToOpenLUserDetailsMapper">
        <constructor-arg name="delegate">
            <bean class="org.springframework.security.ldap.userdetails.LdapUserDetailsMapper"/>
        </constructor-arg>
        <constructor-arg name="domain" value="#{systemConfig['security.ad.domain']}"/>
        <constructor-arg name="url" value="#{systemConfig['security.ad.server-url']}"/>
        <constructor-arg name="searchFilter" value="#{systemConfig['security.ad.search-filter']}"/>
        <constructor-arg name="primaryGroupFilter" value="#{systemConfig['security.ad.primary-group-filter']}"/>
        <constructor-arg name="groupFilter" value="#{systemConfig['security.ad.group-filter']}"/>
    </bean>

    <bean id="groupsAreManagedInStudio" class="java.lang.Boolean">
        <constructor-arg type="boolean" value="#{systemConfig['security.ad.groups-are-managed-in-studio']}"/>
    </bean>

    <bean id="authenticationProviderWrapper" class="org.openl.rules.webstudio.security.OpenLAuthenticationProviderWrapper">
        <constructor-arg name="delegate" ref="adAuthenticationProvider"/>
        <constructor-arg name="authenticationUserDetailsService">
            <bean class="org.openl.rules.webstudio.security.CreateIfNotExistAuthenticationUserDetailsService">
                <constructor-arg name="userManagementService" ref="userManagementService"/>
                <constructor-arg name="groupManagementService" ref="groupManagementService"/>
                <property name="defaultGroup" value="#{systemConfig['security.ad.default-group']}"/>
            </bean>
        </constructor-arg>
        <property name="groupsAreManagedInStudio" ref="groupsAreManagedInStudio"/>
    </bean>

</beans>