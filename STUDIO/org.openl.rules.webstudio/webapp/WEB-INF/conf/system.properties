# System properties

custom.spreadsheet.type = true
dispatching.mode = java
dispatching.validation=true

user.mode = single

test.run.parallel = true
test.run.thread.count = 4

compile.auto = true

# Encoding that can be used to uncompress zip file if UTF-8 isn't applicable.
# Note: often in Windows zips are compressed using DOS charset depending on system locale, not Windows ANSI charset.
zip.charsets.support = IBM866, IBM437, IBM850, windows-1252, windows-1251, windows-1250, ISO-8859-1

# Common properties

user.workspace.home = ${webstudio.home}/user-workspace
user.settings.home = ${webstudio.home}/user-settings

project.history.home = ${webstudio.home}/project-history
project.history.count = 0
project.history.unlimited = true

update.system.properties = false
data.format.date = MM/dd/yyyy

# Compatibility properties
default.openl.compatibility.version =

# Design Repository properties

design-repository.name = Design

design-repository.login =
design-repository.password =

# Which class should we instantiate in RepositoryFactory?
design-repository.factory = org.openl.rules.repository.factories.LocalJackrabbitRepositoryFactory
# Where JCR keeps its files (Local mode)
design-repository.uri = ${webstudio.home}/design-repository

# Available types are
# In case of RMI this property defines how to access it
#design-repository.factory = org.openl.rules.repository.factories.RmiJackrabbitRepositoryFactory
#design-repository.uri = //localhost:1099/design-repository

# In case of WebDav this property defines how to access it
#design-repository.factory = org.openl.rules.repository.factories.WebDavRepositoryFactory
#design-repository.uri = http://localhost:8080/design-repository

# The path in repository where Projects are stored. Must end with "/".
design-repository.rules.path = DESIGN/rules/
# The path in repository where Deployment Configurations are stored. Must end with "/".
design-repository.deployment-configs.path = DESIGN/deployments/

# Deployment Repository properties

production-repository-configs = rules-production.properties

# Secret key for password code/decode
repository.encode.decode.key = This is the key for password secure

### Central Authentication Service (CAS) settings.
# WebStudio server url.
security.cas.app-url = https://localhost:8443/webstudio
# CAS server url.
security.cas.cas-server-url-prefix = https://localhost:9443/cas
# CAS 3.0 protocol validator prefix contains "/p3" in url (and is able to retrieve attributes). If CAS 2.0 is used, remove "/p3".
security.cas.cas-server-ticket-validator-prefix = ${security.cas.cas-server-url-prefix}/p3
# Default Group will be assigned to the users signing in first time. Can be empty.
security.cas.default-group = Viewers
# CAS attribute for First Name. Keep it empty if CAS server doesn't return this attribute.
security.cas.attribute.first-name =
# CAS attribute for Second Name. Keep it empty if CAS server doesn't return this attribute.
security.cas.attribute.last-name =
# CAS attribute for Groups. Keep it empty if CAS server doesn't return this attribute or groups are managed in WebStudio.
security.cas.attribute.groups =

### SAML settings.
# WebStudio server url.
security.saml.app-url = http://localhost:8080/webstudio
# SAML server metadata url.
security.saml.saml-server-metadata-url = http://localhost:9080/idp-meta.xml
# The time, in milliseconds, to wait for the metadata server to respond
security.saml.request-timeout = 15000
# File pointing to the JKS keystore
security.saml.keystore-file-path = classpath:security/keystore.jks
# Password to access the keystore
security.saml.keystore-password = changeit
# Service Provider alias for key in the keystore
security.saml.keystore-sp-alias = webstudio
# Password to access Service Provider key
security.saml.keystore-sp-password = ${security.saml.keystore-password}
# Default Group will be assigned to the users signing in first time. Can be empty.
security.saml.default-group = Viewers
# SAML attribute for Username. Keep it empty if SAML server doesn't return this attribute or if default algorithm for username retrieval must be used.
security.saml.attribute.username =
# SAML attribute for First Name. Keep it empty if SAML server doesn't return this attribute.
security.saml.attribute.first-name =
# SAML attribute for Second Name. Keep it empty if SAML server doesn't return this attribute.
security.saml.attribute.last-name =
# SAML attribute for Groups. Keep it empty if SAML server doesn't return this attribute or groups are managed in WebStudio.
security.saml.attribute.groups =
# Comma separated list of authentication contexts IDP is allowed to use when authenticating user. Can be empty.
security.saml.authentication-contexts = urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport
# Sets binding to be used for for sending SAML message to IDP. Can be empty. Possible values:
# urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST, urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect,
# urn:oasis:names:tc:SAML:2.0:bindings:PAOS, urn:oasis:names:tc:SAML:2.0:profiles:holder-of-key:SSO:browser, etc
security.saml.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect
# Set true for local logout (logging out only from WebStudio) and false for global logout (logging out from all services using this IdP)
security.saml.local-logout = false

### Active Directory (AD) settings.
security.ad.domain=localhost
security.ad.server-url=ldap://localhost:3268
security.ad.groups-are-managed-in-studio=true
security.ad.default-group=Viewers
