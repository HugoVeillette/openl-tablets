package org.openl.rules.repository.db;

final class DatabaseQueries {
    static final String REPOSITORY_NAME = "openl_repository";

    static final String SELECT_ALL_METAINFO = "select r1.id, r1.file_name, r1.file_size, r1.author, r1.file_comment, r1.modified_at, r1.version, case when r1.file_data is null then 1 else 0 end as deleted\n"
            + "from openl_repository r1\n"
            + "inner join (\n"
            + "\tselect max(id) as id\n"
            + "\tfrom openl_repository\n"
            + "\twhere file_name like ? escape '$'\n"
            + "\tgroup by file_name\n"
            + ") r2\n"
            + "on r1.id = r2.id\n"
            + "order by r1.file_name";
    static final String SELECT_ALL_HISTORY_METAINFO_FOR_FILE = "select id, file_name, file_size, author, file_comment, modified_at, version, case when file_data is null then 1 else 0 end as deleted\n"
            + "from openl_repository\n"
            + "where file_name = ?\n"
            + "order by id";
    static final String INSERT_FILE = "insert into openl_repository(file_name, file_size, author, file_comment, modified_at, version, file_data) values(?, ?, ?, ?, ?, ?, ?)";
    static final String READ_ACTUAL_FILE = "select r1.id, r1.file_name, r1.file_size, r1.author, r1.file_comment, r1.modified_at, r1.version, case when r1.file_data is null then 1 else 0 end as deleted, r1.file_data\n"
            + "from openl_repository r1\n"
            + "inner join (\n"
            + "\tselect max(id) as id\n"
            + "\tfrom openl_repository\n"
            + "\twhere file_name = ?\n"
            + ") r2\n"
            + "on r1.id = r2.id";
    static final String READ_ACTUAL_FILE_METAINFO = "select r1.id, r1.file_name, r1.file_size, r1.author, r1.file_comment, r1.modified_at, r1.version, case when r1.file_data is null then 1 else 0 end as deleted\n"
            + "from openl_repository r1\n"
            + "inner join (\n"
            + "\tselect max(id) as id\n"
            + "\tfrom openl_repository\n"
            + "\twhere file_name = ?\n"
            + ") r2\n"
            + "on r1.id = r2.id";
    static final String READ_HISTORIC_FILE = "select id, file_name, file_size, author, file_comment, modified_at, version, case when file_data is null then 1 else 0 end as deleted, file_data\n"
            + "from openl_repository\n"
            + "where file_name = ? and version = ?";
    static final String READ_HISTORIC_FILE_METAINFO = "select id, file_name, file_size, author, file_comment, modified_at, version, case when file_data is null then 1 else 0 end as deleted\n"
            + "from openl_repository\n"
            + "where file_name = ? and version = ?";
    static final String DELETE_ALL_HISTORY = "delete from openl_repository where file_name = ?";
    static final String DELETE_VERSION = "delete from openl_repository where file_name = ? and version = ?";
    static final String SELECT_MAX_ID = "select max(id) as max_id, count(id) as count_id from openl_repository";
    static final String COPY_FILE = "insert into openl_repository(file_name, file_size, author, file_comment, modified_at, version, file_data)\n"
            + "select ? as file_name, r1.file_size, r1.author, r1.file_comment, ? as modified_at, ? as version, r1.file_data\n"
            + "from openl_repository r1\n"
            + "inner join (\n"
            + "\tselect max(id) as id\n"
            + "\tfrom openl_repository\n"
            + "\twhere file_name = ?\n"
            + ") r2\n"
            + "on r1.id = r2.id";
    static final String COPY_HISTORY = "insert into openl_repository(file_name, file_size, author, file_comment, modified_at, version, file_data)\n"
            + "select ? as file_name, file_size, author, file_comment, ? as modified_at, ? as version, file_data\n"
            + "from openl_repository\n"
            + "where file_name = ? and version = ?";

    static final class Initial {
        static final String H2_TABLE = "CREATE TABLE openl_repository (\n"
                + "  id bigint generated by default as identity NOT NULL,\n"
                + "  file_name VARCHAR(1000) NOT NULL,\n"
                + "  file_size BIGINT NOT NULL DEFAULT 0,\n"
                + "  author VARCHAR(45),\n"
                + "  file_comment VARCHAR(255) NULL,\n"
                + "  modified_at TIMESTAMP NOT NULL,\n"
                + "  version VARCHAR(255) NOT NULL,\n"
                + "  file_data blob,\n"
                + "  PRIMARY KEY (id)\n"
                + ");";
        static final String MYSQL_TABLE = "CREATE TABLE openl_repository (\n"
                + "  id BIGINT NOT NULL AUTO_INCREMENT,\n"
                + "  file_name VARCHAR(255) NOT NULL,\n"
                + "  file_size BIGINT NOT NULL DEFAULT 0,\n"
                + "  author VARCHAR(45),\n"
                + "  file_comment VARCHAR(255) NULL,\n"
                + "  modified_at DATETIME NOT NULL,\n"
                + "  version VARCHAR(255) NOT NULL,\n"
                + "  file_data LONGBLOB,\n"
                + "  PRIMARY KEY (id)\n"
                + ");";
        static final String POSTGRESQL_TABLE = "CREATE TABLE openl_repository (\n"
                + "  id BIGSERIAL NOT NULL,\n"
                + "  file_name VARCHAR(1000) NOT NULL,\n"
                + "  file_size BIGINT NOT NULL DEFAULT 0,\n"
                + "  author VARCHAR(45),\n"
                + "  file_comment VARCHAR(255) NULL,\n"
                + "  modified_at TIMESTAMP NOT NULL,\n"
                + "  version VARCHAR(255) NOT NULL,\n"
                + "  file_data BYTEA,\n"
                + "  PRIMARY KEY (id)\n"
                + ");";
        static final String ORACLE_TABLE = "CREATE TABLE openl_repository (\n"
                + "  id NUMBER NOT NULL,\n"
                + "  file_name VARCHAR2(1000) NOT NULL,\n"
                + "  file_size NUMBER DEFAULT 0 NOT NULL,\n"
                + "  author VARCHAR2(45),\n"
                + "  file_comment VARCHAR2(255) NULL,\n"
                + "  modified_at TIMESTAMP NOT NULL,\n"
                + "  version VARCHAR2(255) NOT NULL,\n"
                + "  file_data BLOB,\n"
                + "  PRIMARY KEY (id)\n"
                + ")";
        static final String ORACLE_SEQUENCE = "CREATE SEQUENCE OPENL_REPOSITORY_ID_SEQ START WITH 1";
        static final String ORACLE_TRIGGER = "CREATE OR REPLACE TRIGGER OPENL_REPOSITORY_TRG \n"
                + "BEFORE INSERT ON OPENL_REPOSITORY \n"
                + "FOR EACH ROW\n"
                + "BEGIN\n"
                + "  SELECT OPENL_REPOSITORY_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;\n"
                + "END;";
        static final String SQLSERVER_TABLE = "CREATE TABLE openl_repository (\n"
                + "  id bigint IDENTITY NOT NULL,\n"
                + "  file_name NVARCHAR(1000) NOT NULL,\n"
                + "  file_size BIGINT NOT NULL DEFAULT 0,\n"
                + "  author NVARCHAR(45),\n"
                + "  file_comment NVARCHAR(255) NULL,\n"
                + "  modified_at DATETIME NOT NULL,\n"
                + "  version NVARCHAR(255) NOT NULL,\n"
                + "  file_data VARBINARY(MAX),\n"
                + "  PRIMARY KEY (id)\n"
                + ");";
    }

}
