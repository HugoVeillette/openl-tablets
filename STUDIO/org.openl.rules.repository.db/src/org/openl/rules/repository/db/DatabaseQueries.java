package org.openl.rules.repository.db;

import java.sql.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DatabaseQueries {
    private static final String REPOSITORY_NAME = "openl_repository";

    private static final String H2_TABLE = "CREATE TABLE openl_repository (\n"
            + "  id bigint generated by default as identity NOT NULL,\n"
            + "  file_name VARCHAR(1000) NOT NULL,\n"
            + "  file_size BIGINT NOT NULL DEFAULT 0,\n"
            + "  author VARCHAR(45),\n"
            + "  file_comment VARCHAR(255) NULL,\n"
            + "  modified_at TIMESTAMP NOT NULL,\n"
            + "  version VARCHAR(255) NOT NULL,\n"
            + "  file_data blob,\n"
            + "  PRIMARY KEY (id)\n"
            + ");";
    private static final String MYSQL_TABLE = "CREATE TABLE openl_repository (\n"
            + "  id BIGINT NOT NULL AUTO_INCREMENT,\n"
            + "  file_name VARCHAR(255) NOT NULL,\n"
            + "  file_size BIGINT NOT NULL DEFAULT 0,\n"
            + "  author VARCHAR(45),\n"
            + "  file_comment VARCHAR(255) NULL,\n"
            + "  modified_at DATETIME NOT NULL,\n"
            + "  version VARCHAR(255) NOT NULL,\n"
            + "  file_data LONGBLOB,\n"
            + "  PRIMARY KEY (id)\n"
            + ");";
    private static final String POSTGRESQL_TABLE = "CREATE TABLE openl_repository (\n"
            + "  id BIGSERIAL NOT NULL,\n"
            + "  file_name VARCHAR(1000) NOT NULL,\n"
            + "  file_size BIGINT NOT NULL DEFAULT 0,\n"
            + "  author VARCHAR(45),\n"
            + "  file_comment VARCHAR(255) NULL,\n"
            + "  modified_at TIMESTAMP NOT NULL,\n"
            + "  version VARCHAR(255) NOT NULL,\n"
            + "  file_data BYTEA,\n"
            + "  PRIMARY KEY (id)\n"
            + ");";
    private static final String ORACLE_TABLE = "CREATE TABLE openl_repository (\n"
            + "  id NUMBER NOT NULL,\n"
            + "  file_name VARCHAR2(1000) NOT NULL,\n"
            + "  file_size NUMBER DEFAULT 0 NOT NULL,\n"
            + "  author VARCHAR2(45),\n"
            + "  file_comment VARCHAR2(255) NULL,\n"
            + "  modified_at TIMESTAMP NOT NULL,\n"
            + "  version VARCHAR2(255) NOT NULL,\n"
            + "  file_data BLOB,\n"
            + "  PRIMARY KEY (id)\n"
            + ")";
    private static final String ORACLE_SEQUENCE = "CREATE SEQUENCE OPENL_REPOSITORY_ID_SEQ START WITH 1";
    private static final String ORACLE_TRIGGER = "CREATE OR REPLACE TRIGGER OPENL_REPOSITORY_TRG \n"
            + "BEFORE INSERT ON OPENL_REPOSITORY \n"
            + "FOR EACH ROW\n"
            + "BEGIN\n"
            + "  SELECT OPENL_REPOSITORY_ID_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;\n"
            + "END;";
    private static final String SQLSERVER_TABLE = "CREATE TABLE openl_repository (\n"
            + "  id bigint IDENTITY NOT NULL,\n"
            + "  file_name NVARCHAR(1000) NOT NULL,\n"
            + "  file_size BIGINT NOT NULL DEFAULT 0,\n"
            + "  author NVARCHAR(45),\n"
            + "  file_comment NVARCHAR(255) NULL,\n"
            + "  modified_at DATETIME NOT NULL,\n"
            + "  version NVARCHAR(255) NOT NULL,\n"
            + "  file_data VARBINARY(MAX),\n"
            + "  PRIMARY KEY (id)\n"
            + ");";

    public static void initializeTable(Connection connection, DatabaseType databaseType) throws SQLException {
        if (!tableExists(connection, databaseType)) {
            switch (databaseType) {
                case H2:
                    createTable(connection, H2_TABLE);
                    break;
                case MYSQL:
                    createTable(connection, MYSQL_TABLE);
                    break;
                case POSTGRESQL:
                    createTable(connection, POSTGRESQL_TABLE);
                    break;
                case ORACLE:
                    createTable(connection, ORACLE_TABLE, ORACLE_SEQUENCE, ORACLE_TRIGGER);
                    break;
                case SQL_SERVER:
                    createTable(connection, SQLSERVER_TABLE);
                    break;
                default:
                    throw new UnsupportedOperationException("Unsupported database " + connection.getMetaData().getDatabaseProductName());
            }
        }
    }

    private static void createTable(Connection connection, String... queries) throws SQLException {
        Statement statement = null;
        try {
            statement = connection.createStatement();
            for (String query : queries) {
                statement.execute(query);
            }
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    Logger log = LoggerFactory.getLogger(DatabaseQueries.class);
                    log.warn("Unexpected sql failure", e);
                }
            }
        }

    }

    private static boolean tableExists(Connection connection, DatabaseType databaseType) throws SQLException {
        ResultSet rs = null;
        try {
            DatabaseMetaData metaData = connection.getMetaData();
            String repoTable = metaData.storesUpperCaseIdentifiers() ? REPOSITORY_NAME.toUpperCase() : REPOSITORY_NAME;
            switch (databaseType) {
                case ORACLE:
                    rs = metaData.getTables(null, metaData.getUserName(), repoTable, new String[] { "TABLE" });
                    break;
                default:
                    rs = metaData.getTables(null, null, repoTable, new String[] { "TABLE" });
            }

            return rs.next();
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (SQLException e) {
                    Logger log = LoggerFactory.getLogger(DatabaseQueries.class);
                    log.warn("Unexpected sql failure", e);
                }
            }
        }
    }
}
